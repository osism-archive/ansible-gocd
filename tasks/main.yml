---
- name: Create GoCD service group
  group:
    non_unique: yes
    name: "{{ gocd_user_group }}"
    gid: "{{ gocd_user_gid }}"
  become: true

- name: Create GoCD service user
  user:
    non_unique: yes
    create_home: no
    name: "{{ gocd_user_name }}"
    comment: "GoCD service user"
    uid: "{{ gocd_user_uid }}"
    group: "{{ gocd_user_group }}"
  become: true

- name: Create required directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ operator_user }}"
    group: "{{ operator_group }}"
    mode: 0755
  with_items:
    - "{{ configuration_directory }}"
    - "{{ gocd_docker_compose_directory }}"
    - "{{ gocd_configuration_directory }}"
  become: true

- name: Copy configuration files
  template:
    force: no
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ gocd_user_name }}"
    group: "{{ gocd_user_group }}"
    mode: 0640
  with_items:
    - src: cruise-config.xml.j2
      dest: "{{ gocd_configuration_directory }}/cruise-config.xml"
  become: true

- name: Create passwd file for file-based authentication plugin
  htpasswd:
          crypt_scheme: ldap_sha1
          path: "{{ gocd_configuration_directory }}/passwd"
          name: "{{ gocd_admin_username }}"
          password: "{{ gocd_admin_password }}"
          owner: "{{ gocd_user_name }}"
          group: "{{ gocd_user_group }}"
          mode: 0600
  become: true

- name: Create agent ssh_config directory
  file:
    path: "{{ gocd_configuration_directory }}/agent_ssh_config"
    state: directory
    owner: "{{ gocd_user_name }}"
    group: "{{ gocd_user_group }}"
    mode: 0700
  become: true

- name: Copy docker-compose.yml file
  template:
    src: docker-compose.yml.j2
    dest: "{{ gocd_docker_compose_directory }}/docker-compose.yml"
    owner: "{{ operator_user }}"
    group: "{{ operator_group }}"
    mode: 0640

- name: Pull images
  command: "docker-compose -f {{ gocd_docker_compose_directory }}/docker-compose.yml pull"
  register: result
  changed_when: ('Downloaded' in result.stdout)

- name: Run service
  command: "docker-compose -f {{ gocd_docker_compose_directory }}/docker-compose.yml up -d --remove-orphans --no-build"
  register: result
  changed_when: ('Creating' in result.stdout or 'Recreating' in result.stdout)

- name: Wait for service readiness
  uri:
    url: "https://localhost:8154/go/api/agents"
    url_username: "{{ gocd_admin_username }}"
    url_password: "{{ gocd_admin_password }}"
    headers:
      Accept: "application/vnd.go.cd.v5+json"
    return_content: yes
    validate_certs: no
  register: json_response
  until: json_response["status"] == 200
  retries: 30
  delay: 10

  # - name: Check agent_state from first agent in the list
  #   debug:
  #     msg: "First agents state is {{ (json_response.content|from_json)['_embedded']['agents'][0]['agent_state'] }}"
